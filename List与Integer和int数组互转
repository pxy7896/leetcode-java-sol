// List<Integer> 转 Integer[]        
Integer[] integers2 = list1.toArray(new Integer[0]); // List<String>转String[]也同理。         
// List<Integer> 转 int[]        
int[] arr1 = list1.stream().mapToInt(Integer::valueOf).toArray();        
// 想要转换成int[]类型，就得先转成IntStream，然后调用Integer::valueOf来转成IntStream 而IntStream中默认toArray()转成int[]。         // Integer[] 转 int[]        
int[] arr2 = Arrays.stream(integers1).mapToInt(Integer::valueOf).toArray();       
// Integer[] 转 List<Integer>        
List<Integer> list2 = Arrays.asList(integers1);      

————————————————
版权声明：本文为CSDN博主「weixin_41615787」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_41615787/article/details/85115620

注意：Arrays.asList(String[])返回的是Object类型，所以List这里是无法指定类型的。这里不建议做赋值和修改处理
String[] ans = {"1", "2", "3"};
List finals = Arrays.asList(ans);
for (Object s: finals)
    System.out.println(s.toString());
