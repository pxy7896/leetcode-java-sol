根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：
1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
	如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
	如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
	如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
	如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的
每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例：
输入： 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出：
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]

进阶：
	你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
	本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/game-of-life
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
==============解法=================
注意，这里只求一次更新后的状态。但是由于每个格子都会受周围的影响，所以不能局部更新，需要全局更新。可以
另外加两种状态：
1）原来是活的，现在死了，标为-1
2) 原来是死的，现在活了，标为2
最后所有>0的格子，都是活的(1)；所有<0的格子，都是死的(0)

对于生存定律，可以理解为：（只考虑状态变化）
1）如果细胞是活的(1)，那么邻居中有<2个或>3个死细胞(0)，则变为死亡(0)，这里更新为-1
2) 如果细胞是死的(0)，那么邻居中有3个活细胞(1)，则变为活的(1)，这里更新为2

class Solution {
    public void gameOfLife(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        for (int row = 0; row < rows; row ++) {
            for (int col = 0; col < cols; col ++) {
                // 统计周围的活细胞数量
                int cntLive = 0;
                int[] neighbors = {0, 1, -1};
                // 计算周围
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (!(neighbors[i] == 0 && neighbors[j] == 0)) { // 排除中心位置
                            int r = row + neighbors[i]; // 相对位置
                            int c = col + neighbors[j];
                            // Math.abs = 1 说明未更新前这个格子是活的
                            if (r > -1 && r < rows && c > -1 && c < cols && Math.abs(board[r][c]) == 1)
                                cntLive ++;
                        }
                    }
                }
                // 生存定律1
                if (board[row][col] == 1 && (cntLive < 2 || cntLive > 3))
                    board[row][col] = -1;
                // 生存定律2
                if (board[row][col] == 0 && cntLive == 3)
                    board[row][col] = 2;
            }
        }
        // 最后一次更新
        for (int row = 0; row < rows; row ++) {
            for (int col = 0; col < cols; col ++) {
                if (board[row][col] > 0)
                    board[row][col] = 1;
                else
                    board[row][col] = 0;
            }
        }

    }
}
