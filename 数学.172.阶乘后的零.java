给定一个整数 n，返回 n! 结果尾数中零的数量。

示例 1:
输入: 3
输出: 0
解释: 3! = 6, 尾数中没有零。

示例 2:
输入: 5
输出: 1
解释: 5! = 120, 尾数中有 1 个零.

说明: 你算法的时间复杂度应为 O(log n) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/factorial-trailing-zeroes
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
============================解法===================================
直接计算阶乘容易溢出。因为10=2x5，而n!里2(还有4, 6, 8...都含2)肯定是多于5的，所以只需要计算5的数量，
只要有1个5就会找到一个2与之相配。那么含有5的也有:1)5,10,15...这种是每5个有一个；2)25,50,75...这种除了
有1)中的1个5，还有另一个5；3)125,250,375...这种除了有前面1)和2)中的5，还有另一个5
以此类推，所以cnt = n/5 + n/5/5 + n/5/5/5 ...
class Solution {
    public int trailingZeroes(int n) {
        int cnt = 0;
        while (n > 0) {
            cnt += n / 5;
            n  /= 5;
        }
        return cnt;
    }
}
